#!/usr/bin/perl
# Filename:	album
# Author:	David Ljung Madison <DaveSource.com>
# See License:	http://MarginalHacks.com/License
# Version:	1.01
# Requires:	thumb (convert) <- see http://MarginalHacks.com
# Description:	Makes a photo album
# Assumes:	'Back' for the top of the album is '..'
use strict;

umask 022;	# 0755

##################################################
# Setup the variables
##################################################
my $PROGNAME = $0;
$PROGNAME =~ s|.*/||;

# Default directory page
my $HTML	= "index.html";

# Number of image columns
my $COLUMNS	= 4;

#########################
# Thumb program
#########################
my $THUMB	= "thumb";

# Thumbnail arguments
my $THUMB_DIR	= "tn";
# Size of the thumbnails
my $TN_X	= 100;
my $TN_Y	= 100;
# Crop the thumbnails?
my $CROP	= 1;
# Force new thumbnail generation?
my $FORCE	= 0;
# Image type?  (gif, jpg, tiff, etc..)
my $THUMB_TYPE;

#########################
# URLs for these scripts
#########################
my $ALBUM_URL	= "http://MarginalHacks.com/Hacks/album";
my $THUMB_URL	= "http://MarginalHacks.com/Hacks/thumb";
my $GEN_STRING	= "Generated by <a href=$ALBUM_URL>$PROGNAME</a> and <a href=$THUMB_URL>$THUMB</a>";

##################################################
# Usage
##################################################
sub usage {
  my $msg;
  foreach $msg (@_) { print "ERROR:  $msg\n"; }
  print "\n";
  print "Usage:\t$PROGNAME [-d] [thumb options] <dir>\n";
  print "\tMakes a photo album\n";
  print "\tWarning!  Will overwrite [$HTML] in all subdirectories of <dir>\n";
  print "\n";
  print "\tMost 'thumb' options also work.  See:  'thumb -h'\n";
  print "\n";
  exit -1;
}

sub set_size {
  my ($size) = @_;
  return ($TN_X,$TN_Y) = ($1,$2) if ($size =~ /^(\d+)x(\d+)$/);
  usage("Can't understand geometry [$size]");
}

sub parse_args {
  my $dir;
  my $arg;
  while ($#ARGV>=0) {
    $arg=shift(@ARGV);
    if ($arg =~ /^-h$/) { usage(); }
    if ($arg =~ /^-d$/) { $MAIN::DEBUG = 1; next; }
    if ($arg =~ /^-crop$/) { $CROP = 1; next; }
    if ($arg =~ /^-f(orce)?$/) { $FORCE = 1; next; }
    if ($arg =~ /^-dir$/) { $THUMB_DIR = shift(@ARGV); next; }
    if ($arg =~ /^-type$/) { $THUMB_TYPE = shift(@ARGV); next; }
    if ($arg =~ /^-g(eom(etry)?)?(=(.+))?$/) { set_size($4 ? $4 : shift(@ARGV)); next; }
    if ($arg =~ /^-/) { usage("Unknown option: $arg"); }
    usage("Can't find directory $arg") unless (-d $arg);
    usage("Too many directories: $arg and $dir") if ($dir);
    $dir=$arg;
  }
  usage("You need to specify an dir") unless ($dir);

  $dir =~ s|/$||;	# Little cleanup
  ($dir);
}

##################################################
# HTML
##################################################
sub header {
  my ($dir,@names) = @_;

  my $this = clean_name(pop(@names));
  my $header;
  my $dotdot = "..";
  my $back = $#names;
  my $tmp;
  while ($tmp = pop(@names)) {
    $tmp = clean_name($tmp);
    $header = "<a href=".("../"x($back-$#names)).">$tmp</a> : $header";
  }
  $header.=$this;

  print HTML <<END_OF_HEADER;
<html>
  <head>
    <title>
      Album: $this
    </title>
  </head>
  <body bgcolor=white>
  <table width=95%>
    <tr>
      <td align=left>
        <h2>$header</h2>
      </td>
      <td align=right>
        <h1><a href=..>Up</a></h1>
      </td>
    </tr>
  </table>
  <p><hr><p>
END_OF_HEADER

  if (-f "$dir/header.txt" && open(HEADER,"<$dir/header.txt")) {
    while(<HEADER>) { print HTML; }
    print HTML "<p><hr><p>\n";
  }
}

sub footer {
  my ($dir) = @_;
  if (-f "$dir/footer.txt" && open(FOOTER,"<$dir/footer.txt")) {
    while(<FOOTER>) { print HTML; }
    print HTML "<p><hr><p>\n";
  }
  my $date = localtime;
  print HTML <<END_OF_FOOTER;
    <font size=-1>
      $GEN_STRING on $date
    </font>
  </body>
</html>
END_OF_FOOTER

}

#########################
# Table stuff
#########################
my $TABLE_COUNT;
sub start_table {
  $TABLE_COUNT = 0;
  print HTML "  <table cellspacing=10 width=95%>\n";
  print HTML "    <tr>\n";
}

sub end_table {
  print HTML "       </td>\n";
  print HTML "    </tr>\n";
  print HTML "  </table>\n";
}

# Return true if we started a new row
sub new_element {
  my $new_row = 0;
  if ($TABLE_COUNT) {
    print HTML "      </td>\n";
    unless ($TABLE_COUNT % $COLUMNS) {
      print HTML "    </tr><tr>\n";
      $new_row=1;
    }
  }
  print HTML "      <td ";
  print HTML "width=",(100/$COLUMNS),"% " if ($TABLE_COUNT < $COLUMNS);
  print HTML "valign=top>\n";
  $TABLE_COUNT++;
}

##################################################
# Code
##################################################
sub clean_name {
  my ($name) = @_;

  # No tags in filenames  :)
  $name =~ s/\</&lt;/g;

  # Underbar = space
  $name =~ s/_/ /g;
  $name =~ s/\./ /g;

  # No paths
  $name =~ s|^.*/||g;

  # Remove postfixes
  $name =~ s/\.([^\.]{2,3}|tiff)$//;

  $name;
}

# Create a thumbnail, return the name
sub thumbnail {
  my ($pic) = @_;

  my $command = "$THUMB";
  $command .= " -dir $THUMB_DIR" if ($THUMB_DIR);
  $command .= " -geom ${TN_X}x${TN_Y}";
  $command .= " -crop" if ($CROP);
  $command .= " -f" if ($FORCE);
  $command .= " -type $THUMB_TYPE" if ($THUMB_TYPE);
  $command .= " $pic";

  my $thumb = `$command`;
  my $ret = $?;
  die("[$PROGNAME] Couldn't find thumb program [$THUMB]:\n  See $THUMB_URL\n")
    if ($ret == 256);
  die("[$PROGNAME] Problem running [$THUMB]:\n  $thumb\n") if ($ret);
  chomp($thumb);
  $thumb;
}

# What's the filesize of a file?  (String format)
sub filesize($) {
  my ($file) = @_;
  my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
      $atime,$mtime,$ctime,$blksize,$blocks) = stat($file);
  $size=int($size/102.4)/10;
  $size=int($size) if ($size>10);
  return "${size}k" if ($size<1024);
  $size=int($size/102.4)/10;
  return "${size}M" if ($size<1024);
  $size=int($size/102.4)/10;
  "${size}G";
}

# Is there some unknown HTML (that we didn't create?)
my $GEN_REGEX = $GEN_STRING;
   $GEN_REGEX =~ s/<[^>]+>/<.+>/g;	# Ignore URL stuff in regex
sub unknown_html {
  my ($file) = @_;

  return 0 unless -f $file;
  return 0 if -z $file;
  open(FILE,$file) || return 1;
  while(<FILE>) {
    if (/$GEN_REGEX/) {
      close(FILE);
      return 0;
    }
  }
  close(FILE);
  return 1;
}

sub do_album {
  my ($dir,@names) = @_;

  print STDERR "Album: $dir\n";

  #########################
  # Get images and subdirectories
  #########################
  opendir(DIR,$dir);
  my (@dir) = grep(!/^\.{1,2}$/, readdir(DIR));
  closedir(DIR);

  my @new_dirs = grep(-d "$dir/$_" && $_ ne $THUMB_DIR, @dir);
  # Bad heuristic
  my @pics = grep(-f "$dir/$_" && !/\.html?$/, @dir);

  #########################
  # Write the html
  #########################
  return print STDERR "[$PROGNAME] Unknown HTML [$dir/$HTML] - skipping\n"
    if (unknown_html("$dir/$HTML"));
  open(HTML,">$dir/$HTML") || die("[$PROGNAME] Couldn't write html [$dir/$HTML]\n");
  header($dir,@names);

  #########################
  # Links to sub-albums
  #########################
  if (@new_dirs) {
    start_table();
    new_element();
    print HTML "<font size=+2><i>More albums:</i></font>\n";
    foreach my $new ( sort @new_dirs ) {
      my $name = clean_name($new);
      new_element();
      print HTML "<font size=+1><a href=$new>$name</a></font>\n";
    }
    print HTML "<font size=+1><a href=..>Up</a></font>\n" unless new_element();
    end_table();
    print HTML "<p><hr><p>\n";
  }

  #########################
  # Table of thumbnails
  #########################
  if (@pics) {
    start_table();
    foreach my $pic ( sort @pics ) {
      next if ($pic =~ /\.txt$/);	# Don't thumbnail captions  ;)
      my $name = clean_name($pic);
      my $caption = "$dir/$pic";  $caption =~ s/\.[^\.]+$//;  $caption.=".txt";
      my $size = filesize "$dir/$pic";

      new_element();

      unless ($pic =~ /\.(mov|mpg|mpeg)$/) {
        # Thumbnail and picture info
        my $thumb = thumbnail("$dir/$pic");
        next unless ($thumb);
        # Ugly - remove path component from $thumb
        $thumb =~ s/^$dir\/?//;

        # The thumbnail
        print HTML "        <a href=$pic>\n";
        print HTML "          <img width=$TN_X height=$TN_Y border=0 src=$thumb>\n";
        print HTML "          <br>\n";
        print HTML "          $name\n";
        print HTML "          <font size=-1><i>[$size]</i></font>\n";
        print HTML "        </a><br>\n";
      } else {
        # Movie clip - should we have a movie button?
        print HTML "        <font size=+1><b>Movie Clip:</b></font>\n";
        print HTML "        <p>\n";
        print HTML "        <a href=$pic>\n";
        print HTML "          $name\n";
        print HTML "          <font size=-1><i>[$size]</i></font>\n";
        print HTML "        </a><br>\n";
      }
      if (-f $caption && open(CAPTION,"<$caption")) {
        print HTML "          <font size=-2>\n";
        while(<CAPTION>) { print HTML; }
        print HTML "          </font>\n";
      }
    }
    end_table();
    print HTML "<p><hr><p>\n";
  }

  footer($dir);
  close(HTML);

  #########################
  # Do all the subdirectories
  #########################
  foreach ( @new_dirs ) { do_album("$dir/$_",@names,$_); }
}

##################################################
# Main code
##################################################
sub main {

  my $dir=parse_args();

  # Get the true basename (in case they use '..' or some such)
  my $pwd=`pwd`; chomp($pwd);
  chdir($dir) || usage("Couldn't find [$dir]");
  my $name=`pwd`;  chomp($name);
  chdir($pwd);
  $name =~ s|.*/||;


  do_album($dir,$name);
}
main();
